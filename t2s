#!/usr/bin/perl -w

# $Id$

#----- P e r l d o c -----

=pod

=head1 NAME

B<t2s> - Toporobot to Survex

=head1 SYNOPSIS

[perl] t2s <toporobot TEXT file>

=head1 DESCRIPTION

Convert Toporobot exported TEXT file into Survex file format (.svx)

=head1 REQUIREMENTS

=head2 Perl Modules

HTTP::Date

=head1 BEERWARE LICENCE

"THE BEER-WARE LICENSE" (http://en.wikipedia.org/wiki/Beerware):
<michel @ speleo ch> wrote this file. As long as you retain this notice you can do whatever you want with this stuff. If we meet some day, and you think this stuff is worth it, you can buy me a beer in return. Michel Bovey

=cut

#-----  C o d e  -----

use strict;
use HTTP::Date;
use File::Basename;

my $MIN_SURVEX_VERSION = '1.4';

my $tr_filename = shift;

my %cave;
my @trip;
my %code;
my @serie;
my @passage;
my @leg;
my @export;

my $current_serie_number = 0;
my $last_station_number  = 0;
my $default_code;
my $code_level = -1;
my $trip_level = -1;

open( SRC, $tr_filename )
  || die "Can't open toporobot source file \<$tr_filename\> for read";

my $svx_filename = $tr_filename;
$svx_filename =~ s/\..*$//;
$svx_filename .= '.svx';
open( SVX, ">$svx_filename" )
  || die "Can't open file <$svx_filename> to write survex data into";
print "creating ", $svx_filename, "\n";

my $basename = basename($svx_filename, '.svx');

print SVX '; Generated on ', time2str, ' by ', __FILE__, "\n";

print SVX '; From Toporobot exported file: ', $tr_filename,        "\n\n";
print SVX '*begin ', $basename, "\n";
print SVX '*require ', $MIN_SURVEX_VERSION, "\n";

my ( $tr_ref, $tr_data, $tr_comment_flag );
my ( $tr_serie, $tr_station, $tr_code, $tr_session, $tr_trip );

# assume End Of Line for Macintosh <carriage return>
local $/ = "\x0d";

while (<SRC>) {
    chomp;
##    next if length $_ < 26;    # avoid entry with no data (eg -3)
    $tr_ref = substr( $_, 0, 24 );
    $tr_data = substr( $_, 25 );
    $tr_data =~ s/^\s+//;      # remove leading spaces
    $tr_data =~ s/\s+$//;      # remove trailing spaces
    $tr_comment_flag = $tr_ref =~ /^\(/;

    #? print STDERR $_, "\n" if $tr_comment_flag;
    $tr_ref =~ s/^\(//;        # remove leading parenthesis
    $tr_ref =~ s/^\s+//;       # remove leading spaces

    #? print STDERR $tr_ref, "\n";
    ( $tr_serie, $tr_station, $tr_code, $tr_session, $tr_trip ) = split /\s+/,
      $tr_ref;

#? print STDERR "$tr_ref\n$tr_serie,  $tr_station, $tr_code, $tr_session, $tr_trip\n";
    if ( $tr_serie > 0 ) {
        if ( $tr_station > -1 ) {
            parse_station( $tr_serie, $tr_station, $tr_code, $tr_trip, $tr_data,
                $tr_comment_flag );
        }
        elsif ( $tr_station == -2 ) {
            parse_serie_name( $tr_serie, $tr_station, $tr_code, $tr_trip,
                $tr_data, $tr_comment_flag );
        }
        elsif ( $tr_station == -1 ) {
            parse_serie_data( $tr_serie, $tr_station, $tr_code, $tr_trip,
                $tr_data, $tr_comment_flag );
        }
    }
    elsif ( $tr_serie == -1 ) {
        parse_code( $tr_station, $tr_data, $tr_comment_flag );
    }
    elsif ( $tr_serie == -2 ) {
        parse_trip( $tr_station, $tr_data, $tr_comment_flag );
    }
    elsif ( $tr_serie == -5 ) {
        parse_entrance( $tr_data, $tr_comment_flag );
    }
    elsif ( $tr_serie == -6 ) {
        parse_cavename( $tr_data, $tr_comment_flag );
    }
    else {
    #?   print STDERR 'unknown serie ', $tr_serie, "\n";
        next;
    }
}

compute_export();

print_cave();

my @code_list = keys %code;

@code_list =
  sort { $code{$b}{occurence} <=> $code{$a}{occurence} }
  @code_list;    # mostly used code first
$default_code = $code_list[0];
print_code( $code{$default_code}, $code{$default_code}, \$code_level );

#? my ($k,$j);
#? foreach $k (keys %code) {
#?   foreach $j (keys %{$code{$k}}) {
#?     print STDERR 'code {', $k, '}{',$j,'} = ',$code{$k}{$j},"\n";
#?   }
#? }
#? foreach (sort keys %code) {print STDERR 'code ', $_, ' appears ', $code{$_}{occurence}, "\n"; }
#? foreach (@code_list) { print STDERR 'code sorted ', $_, "\n"; }
#? print STDERR 'default code is ', $default_code, "\n";

foreach $current_serie_number ( 1 .. $#serie ) {
    #? print STDERR 'number : ', $current_serie_number;
    if (defined $serie[$current_serie_number]->{number}) {
        #? print STDERR ' FOUND';
        print_serie_data($current_serie_number);
    }
    #? print STDERR "\n";
}

close SRC;
print SVX '*end ', $basename;
close SVX;

sub parse_serie_name {
    my ( $tr_serie, $tr_station, $tr_code, $tr_trip, $tr_data,
        $tr_comment_flag ) = @_;
    unless ($tr_comment_flag) {
        print STDERR 'New serie : ', $tr_serie, "\n";
        $serie[$tr_serie]->{number} = $tr_serie;
        $tr_data =~ s/"//g;    # survex format don't like apostroph
        if ( length($tr_data) > 0 ) {
            $serie[$tr_serie]->{name} = $tr_data;
        }
        else {
            $serie[$tr_serie]->{name} = 'serie ' . $tr_serie;
            print STDERR 'serie ', $tr_serie, ' has no name', "\n";
        }
    }
    else {
        $serie[$tr_serie]->{comment} .= $tr_data;
    }
}

sub parse_serie_data {
    my ( $tr_serie, $tr_station, $tr_code, $tr_trip, $tr_data,
        $tr_comment_flag ) = @_;
    unless ($tr_comment_flag) {
        (
            $serie[$tr_serie]->{start_serie},
            $serie[$tr_serie]->{start_station},
            $serie[$tr_serie]->{end_serie},
            $serie[$tr_serie]->{end_station},
            $serie[$tr_serie]->{nbr_station},
            $serie[$tr_serie]->{chances},
            $serie[$tr_serie]->{obstacle}
        ) = split /\s+/, $tr_data;

        # exporting first and last station
        add_if_not_in( $tr_serie, 0 );
        add_if_not_in( $tr_serie, $serie[$tr_serie]->{nbr_station} );
    }
    else {
        $serie[$tr_serie]->{comment} .= $tr_data;
    }
}

sub parse_code {
    my ( $code, $tr_data, $tr_comment_flag ) = @_;
    unless ($tr_comment_flag) {
        (
            $code{$code}{compass_unit},    $code{$code}{clino_unit},
            $code{$code}{tape_precision},  $code{$code}{compass_precision},
            $code{$code}{clino_precision}, $code{$code}{declination},
            $code{$code}{limit_angle}
        ) = split /\s+/, $tr_data;
    }
    else {
        $code{$code}{comment} .= $tr_data;
    }
    $code{$code}{occurence} = 0;
}

sub parse_trip {
    my ( $trip, $tr_data, $tr_comment_flag ) = @_;
    unless ($tr_comment_flag) {
        $trip[$trip]->{date}        = substr( $tr_data, 0,  8 );
        $trip[$trip]->{speleometer} = substr( $tr_data, 10, 14 );
        $trip[$trip]->{speleometer} =~ s/\s+$//;
        $trip[$trip]->{speleograph} = substr( $tr_data, 24, 14 );
        $trip[$trip]->{speleograph} =~ s/\s+$//;
        (
            $trip[$trip]->{declination_flag},
            $trip[$trip]->{declination_value},
            $trip[$trip]->{color}
        ) = split /\s+/, substr( $tr_data, 38 );
    }
    else {
        $trip[$trip]->{comment} .= $tr_data;
    }
}

sub parse_station {
    my ( $tr_serie, $tr_station, $tr_code, $tr_trip, $tr_data,
        $tr_comment_flag ) = @_;
    unless ($tr_comment_flag) {
        my $station_id      = $tr_station;
        my $last_station_id = $last_station_number;
        my @data            = split /\s+/, $tr_data;
        if ( $last_station_id ne $station_id ) {
            $code{$tr_code}{occurence}++;
            $leg[$tr_serie][$tr_station]->{code} = $tr_code;
            $leg[$tr_serie][$tr_station]->{trip} = $tr_trip;
            $leg[$tr_serie][$tr_station]->{data} = join ' ',
              ( $last_station_id, $station_id, splice( @data, 0, 3 ) );

            #? print STDERR $leg[$tr_serie][$tr_station]->{data}, "\n";
            $passage[$tr_serie][$tr_station]->{lrud} = join ' ',
              ( $station_id, @data );
        }
        else {
            $passage[$tr_serie][$tr_station]->{lrud} = join ' ',
              ( $station_id, splice( @data, -4 ) );
        }

#? print STDERR $station_id, '[', $tr_serie, '-', $tr_station, '] : ', $passage[$tr_serie][$tr_station]->{lrud}, "\n";
        $passage[$tr_serie][$tr_station]->{code} = $tr_code;
        $passage[$tr_serie][$tr_station]->{trip} = $tr_trip;
        if ( $tr_station < $serie[$tr_serie]->{nbr_station} ) {
            $last_station_number = $tr_station;
        }
        else {
            $last_station_number = 0;
        }
    }
    else {
        $passage[$tr_serie][$tr_station]->{comment} .= $tr_data;
    }
}

sub parse_entrance {
    my ( $data, $tr_comment_flag ) = @_;
    unless ($tr_comment_flag) {
        my ( $coordX, $coordY, $coordZ, $serie, $station ) = split /\s+/, $data;
        $cave{entrance}    = $serie . '.' . $station;
        $cave{coordinates} = $coordX . ' ' . $coordY . ' ' . $coordZ
          if ( abs($coordX) + abs($coordY) + abs($coordZ) > 0.0 );
    }
    else {
        $cave{comment} .= $data;
    }
}

sub parse_cavename {
    my ( $data, $tr_comment_flag ) = @_;
    unless ($tr_comment_flag) {
        $data =~ s/"//g;
        $cave{name} = $data;
    }
    else {
        $cave{name_comment} .= $data;
    }
}

sub print_cave {
    print SVX "\n", '*title "', $cave{name}, '"', "\n";
    print SVX '; ', $cave{name_comment}, "\n"
      if defined $cave{name_comment};

 # for Toporobot station 1.0 is the cave entrance to where coordinates are fixed
    print SVX "\n", '*entrance ', $cave{entrance}, "\n";
    print SVX '*fix ', $cave{entrance}, ' ', $cave{coordinates}, "\n"
      if defined $cave{coordinates};
    print SVX '; ', $cave{comment}, "\n" if defined $cave{comment};
    print SVX "\n";
}

sub print_serie_data {
    my $ser = shift;
    my $sta;

    print_equates($ser);

    print SVX "\n", '*begin ', $ser, "\n";
    print SVX '*title "', $serie[$ser]->{name}, '"', "\n";
    print SVX '; ', $serie[$ser]->{comment}, "\n"
      if defined $serie[$ser]->{comment};

    print_export($ser);

    my $current_trip = -1;
    my $current_code = $default_code;

    print SVX "\n", '*data normal from to tape compass clino ignoreall', "\n\n";
    for $sta ( 1 .. $#{ $leg[$ser] } ) {
        if ( $leg[$ser][$sta]->{trip} != $current_trip ) {
            print_trip( $leg[$ser][$sta]->{trip}, \$current_trip,
                \$trip_level );
        }
        if ( $leg[$ser][$sta]->{code} != $current_code ) {

#? print STDERR "current_code:", $current_code, ",\tstation_code:", $leg[$ser][$sta]->{code},"\n";
            print_code( $code{ $leg[$ser][$sta]->{code} },
                \$current_code, \$code_level );
            $current_code = $leg[$ser][$sta]->{code};
        }
        print SVX $leg[$ser][$sta]->{data}, "\n";
    }
    while ( $trip_level > 0 ) {
        close_block( \$trip_level );
    }
    while ( $code_level > 0 ) {
        close_block( \$code_level );
    }

    print SVX "\n", '*data passage station left right up down ignoreall', "\n";
    for $sta ( 0 .. $#{ $passage[$ser] } ) {
        print SVX $passage[$ser][$sta]->{lrud}, "\n";
        print SVX '; station ', $ser, '.', $sta, ': ',
          $passage[$ser][$sta]->{comment}, "\n"
          if defined $passage[$ser][$sta]->{comment};
    }
    print SVX "\n", '*end ', $ser, "\n\n";

}

sub print_equates {
    my $ser = shift;

    unless ( ( $serie[$ser]->{start_serie} == $ser )
        && ( $serie[$ser]->{start_station} == 0 ) )
    {
        print SVX '*equate ', $serie[$ser]->{start_serie}, '.',
          $serie[$ser]->{start_station}, ' ', $ser, '.0', "\n";
    }
    unless ( ( $serie[$ser]->{end_serie} == $ser )
        && ( $serie[$ser]->{end_station} == $serie[$ser]->{nbr_station} ) )
    {
        print SVX '*equate ', $serie[$ser]->{end_serie}, '.',
          $serie[$ser]->{end_station}, ' ', $ser, '.',
          $serie[$ser]->{nbr_station}, "\n";
    }
}

sub print_trip {
    my ( $new_trip, $ref_old_trip, $ref_trip_level ) = @_;
    if ( $$ref_old_trip != $new_trip && $$ref_trip_level > 0 ) {
        close_block($ref_trip_level);
    }
    if ( $$ref_trip_level >= 0 ) {
        open_block($ref_trip_level);
    }
    my ( $day, $month, $year ) = split /\//, $trip[$new_trip]->{date};
    $year = 1900 + $year if $year >= 33;
    $year = 2000 + $year if $year < 33;
    print SVX '*date ', $year, '-', $month, '-', $day, "\n";
    print SVX '*team "', $trip[$new_trip]->{speleometer},
      '" compass clino tape', "\n";
    print SVX '*team "', $trip[$new_trip]->{speleograph},
      '" notes pictures tape', "\n";
# ----
# problem while trying to write calibration into SVX, 
# e.g. Z7 main passage with an orientation 100 degrees wrong
# commenting code out
#    if ( $trip[$new_trip]->{declination_flag} ) {
#        print SVX '*calibrate compass ',
#          $trip[$new_trip]->{declination_value},
#          "\n";
#    }
# ----

#  print SVX '; toporobot declination flag: ', $trip[$new_trip]->{declination_flag}, "\n";
#  print SVX '; toporobot declination value: ', $trip[$new_trip]->{declination_value}, "\n";
    $$ref_old_trip = $new_trip;
}

sub print_code {
    my ( $ref_code, $ref_old_code, $ref_code_level ) = @_;
    my $value;

#?  print STDERR 'ref_code :', $ref_code, "\n";
#?  print STDERR 'ref_old_code :', $ref_old_code,     ' ref :', $ref_old_code,  "\n";
#?  print STDERR 'code_level :', $$ref_code_level, ' ref :', $ref_code_level, "\n";

    if ( $ref_old_code != $ref_code && $$ref_code_level > 0 ) {
        close_block($ref_code_level);
    }
    if ( $$ref_code_level >= 0 ) {
        open_block($ref_code_level);
    }

    print SVX '*units tape meters ', "\n";

    if    ( $$ref_code{compass_unit} == 360 ) { $value = 'degrees' }
    elsif ( $$ref_code{compass_unit} == 400 ) { $value = 'grads' }
    print SVX '*units compass ', $value, "\n";

    if    ( $$ref_code{clino_unit} == 360 ) { $value = 'degrees' }
    elsif ( $$ref_code{clino_unit} == 400 ) { $value = 'grads' }
    elsif ( $$ref_code{clino_unit} == 370 ) { $value = 'percent' }
    elsif ( $$ref_code{clino_unit} == 380 ) {
        $value = 'difference-of-altitude';
    }
    elsif ( $$ref_code{clino_unit} == 361 ) { $value = 'degrees-zenital' }
    elsif ( $$ref_code{clino_unit} == 401 ) { $value = 'grads-zenital' }
    elsif ( $$ref_code{clino_unit} == 359 ) { $value = 'degrees-nadiral' }
    elsif ( $$ref_code{clino_unit} == 399 ) { $value = 'grads-nadiral' }
    print SVX '*units clino ', $value, "\n";

# ----
# problem while trying to write calibration into SVX, 
# e.g. Z7 main passage with an orientation 100 degrees wrong
# commenting code out
#    if ( $$ref_code{declination} != 0 ) {
#        print SVX '*calibrate compass ', $$ref_code{declination}, "\n";
#    }
# ----

    if ( $$ref_code{limit_angle} < 0 ) {
        print SVX '*flags';
        print SVX ' surface' if $$ref_code{limit_angle} == -100;
        print SVX ' splay'   if $$ref_code{limit_angle} == -101;
        print SVX "\n";
    }
}

sub compute_export {

    # exporting all junction station.
    foreach (@serie) {
        if ( defined $_->{number} ) {
            add_if_not_in( $_->{start_serie}, $_->{start_station} );
            add_if_not_in( $_->{end_serie},   $_->{end_station} );
        }
    }
}

sub add_if_not_in {
    my ( $serie, $station ) = @_;
    my $found = 0;
    if ( defined $export[$serie] ) {
        for ( @{ $export[$serie] } ) {
            $found = $_ == $station;
            last if $found;
        }
        $export[$serie] = [ $station, @{ $export[$serie] } ] unless $found;
    }
    else {
        $export[$serie] = [$station];
    }
}

sub print_export {
    my $serie = shift;
    if ( defined $export[$serie] ) {
        print SVX '*export';
        foreach ( sort @{ $export[$serie] } ) {
            print SVX ' ', $_;
        }
        print SVX "\n";
    }
}

sub open_block {
    my $ref_level = shift;
    if ( $$ref_level > 0 ) {
        print SVX '*begin', "\n";
    }
    $$ref_level++;
}

sub close_block {
    my $ref_level = shift;
    if ( $$ref_level > 0 ) {
        print SVX '*end', "\n";
    }
    $$ref_level--;
}
